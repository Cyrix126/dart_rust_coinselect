// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'types.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`

Future<BigInt> calculateWaste({
  required CoinSelectionOpt options,
  required BigInt accumulatedValue,
  required BigInt accumulatedWeight,
  required BigInt estimatedFee,
}) => RustLib.instance.api.crateUtilsCalculateWaste(
  options: options,
  accumulatedValue: accumulatedValue,
  accumulatedWeight: accumulatedWeight,
  estimatedFee: estimatedFee,
);

/// `adjusted_target` is the target value plus the estimated fee.
///
/// `smaller_coins` is a slice of pairs where the `usize` refers to the index of the `OutputGroup` in the provided inputs.
/// This slice should be sorted in descending order by the value of each `OutputGroup`, with each value being less than `adjusted_target`.
Future<BigInt> calculateAccumulatedWeight({
  required List<(BigInt, BigInt, BigInt)> smallerCoins,
  required Set<BigInt> selectedInputs,
}) => RustLib.instance.api.crateUtilsCalculateAccumulatedWeight(
  smallerCoins: smallerCoins,
  selectedInputs: selectedInputs,
);

Future<BigInt> calculateFee({required BigInt weight, required double rate}) =>
    RustLib.instance.api.crateUtilsCalculateFee(weight: weight, rate: rate);

/// Returns the effective value of the `OutputGroup`, which is the actual value minus the estimated fee.
Future<BigInt> effectiveValue({
  required OutputGroup output,
  required double feerate,
}) => RustLib.instance.api.crateUtilsEffectiveValue(
  output: output,
  feerate: feerate,
);

/// Returns the weights of data in transaction other than the list of inputs that would be selected.
Future<BigInt> calculateBaseWeightBtc({required BigInt outputWeight}) => RustLib
    .instance
    .api
    .crateUtilsCalculateBaseWeightBtc(outputWeight: outputWeight);

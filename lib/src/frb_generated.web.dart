// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

// Static analysis wrongly picks the IO variant, thus ignore this
// ignore_for_file: argument_type_not_assignable

import 'algorithms/bnb.dart';
import 'algorithms/fifo.dart';
import 'algorithms/knapsack.dart';
import 'algorithms/lowestlarger.dart';
import 'algorithms/srd.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';
import 'selectcoin.dart';
import 'types.dart';
import 'utils.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  Set<BigInt> dco_decode_Set_usize_None(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  CoinSelectionOpt dco_decode_box_autoadd_coin_selection_opt(dynamic raw);

  @protected
  double dco_decode_box_autoadd_f_32(dynamic raw);

  @protected
  OutputGroup dco_decode_box_autoadd_output_group(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw);

  @protected
  CoinSelectionOpt dco_decode_coin_selection_opt(dynamic raw);

  @protected
  ExcessStrategy dco_decode_excess_strategy(dynamic raw);

  @protected
  double dco_decode_f_32(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  List<OutputGroup> dco_decode_list_output_group(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  Uint64List dco_decode_list_prim_usize_strict(dynamic raw);

  @protected
  List<(BigInt, BigInt, BigInt)> dco_decode_list_record_usize_u_64_u_64(
    dynamic raw,
  );

  @protected
  double? dco_decode_opt_box_autoadd_f_32(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw);

  @protected
  OutputGroup dco_decode_output_group(dynamic raw);

  @protected
  (BigInt, BigInt, BigInt) dco_decode_record_usize_u_64_u_64(dynamic raw);

  @protected
  SelectionError dco_decode_selection_error(dynamic raw);

  @protected
  SelectionOutput dco_decode_selection_output(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  WasteMetric dco_decode_waste_metric(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  Set<BigInt> sse_decode_Set_usize_None(SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  CoinSelectionOpt sse_decode_box_autoadd_coin_selection_opt(
    SseDeserializer deserializer,
  );

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer);

  @protected
  OutputGroup sse_decode_box_autoadd_output_group(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  CoinSelectionOpt sse_decode_coin_selection_opt(SseDeserializer deserializer);

  @protected
  ExcessStrategy sse_decode_excess_strategy(SseDeserializer deserializer);

  @protected
  double sse_decode_f_32(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  List<OutputGroup> sse_decode_list_output_group(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  Uint64List sse_decode_list_prim_usize_strict(SseDeserializer deserializer);

  @protected
  List<(BigInt, BigInt, BigInt)> sse_decode_list_record_usize_u_64_u_64(
    SseDeserializer deserializer,
  );

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  OutputGroup sse_decode_output_group(SseDeserializer deserializer);

  @protected
  (BigInt, BigInt, BigInt) sse_decode_record_usize_u_64_u_64(
    SseDeserializer deserializer,
  );

  @protected
  SelectionError sse_decode_selection_error(SseDeserializer deserializer);

  @protected
  SelectionOutput sse_decode_selection_output(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  WasteMetric sse_decode_waste_metric(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_Set_usize_None(Set<BigInt> self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_coin_selection_opt(
    CoinSelectionOpt self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_output_group(
    OutputGroup self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_coin_selection_opt(
    CoinSelectionOpt self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_excess_strategy(
    ExcessStrategy self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_output_group(
    List<OutputGroup> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_prim_usize_strict(
    Uint64List self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_record_usize_u_64_u_64(
    List<(BigInt, BigInt, BigInt)> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_output_group(OutputGroup self, SseSerializer serializer);

  @protected
  void sse_encode_record_usize_u_64_u_64(
    (BigInt, BigInt, BigInt) self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_selection_error(
    SelectionError self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_selection_output(
    SelectionOutput self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_waste_metric(WasteMetric self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
extension type RustLibWasmModule._(JSObject _) implements JSObject {}
